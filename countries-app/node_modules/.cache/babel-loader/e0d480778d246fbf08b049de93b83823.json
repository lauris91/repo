{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lauris.Zaicevs\\\\Downloads\\\\repo\\\\countries-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { Query } from \"react-apollo\";\nimport CountryComponent from './country';\nconst httpLink = createHttpLink({\n  uri: 'https://countries.trevorblades.com/'\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nconst FEED_QUERY_COUNTRIES = {\n  \"kind\": \"Document\",\n  \"definitions\": [{\n    \"kind\": \"OperationDefinition\",\n    \"operation\": \"query\",\n    \"name\": {\n      \"kind\": \"Name\",\n      \"value\": \"getCountries\"\n    },\n    \"variableDefinitions\": [],\n    \"directives\": [],\n    \"selectionSet\": {\n      \"kind\": \"SelectionSet\",\n      \"selections\": [{\n        \"kind\": \"Field\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"countries\"\n        },\n        \"arguments\": [],\n        \"directives\": [],\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"code\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"name\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"native\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"phone\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"continent\"\n            },\n            \"arguments\": [],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"code\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"name\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }]\n            }\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"currency\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"languages\"\n            },\n            \"arguments\": [],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"code\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"name\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }]\n            }\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"emoji\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"emojiU\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }]\n        }\n      }]\n    }\n  }],\n  \"loc\": {\n    \"start\": 0,\n    \"end\": 217,\n    \"source\": {\n      \"body\": \"query getCountries{\\r\\n  countries{\\r\\n    code\\r\\n    name\\r\\n    native\\r\\n    phone\\r\\n    continent{\\r\\n      code\\r\\n      name\\r\\n    }\\r\\n    currency\\r\\n    languages{\\r\\n      code\\r\\n      name\\r\\n    }  \\r\\n    emoji\\r\\n    emojiU\\r\\n  }\\r\\n}\",\n      \"name\": \"GraphQL request\",\n      \"locationOffset\": {\n        \"line\": 1,\n        \"column\": 1\n      }\n    }\n  }\n};\nconst FEED_QUERY_COUNTRY = {\n  \"kind\": \"Document\",\n  \"definitions\": [{\n    \"kind\": \"OperationDefinition\",\n    \"operation\": \"query\",\n    \"name\": {\n      \"kind\": \"Name\",\n      \"value\": \"country\"\n    },\n    \"variableDefinitions\": [{\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"code\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NonNullType\",\n        \"type\": {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"String\"\n          }\n        }\n      },\n      \"directives\": []\n    }],\n    \"directives\": [],\n    \"selectionSet\": {\n      \"kind\": \"SelectionSet\",\n      \"selections\": [{\n        \"kind\": \"Field\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"country\"\n        },\n        \"arguments\": [{\n          \"kind\": \"Argument\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"value\": {\n            \"kind\": \"Variable\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"code\"\n            }\n          }\n        }],\n        \"directives\": [],\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"code\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"name\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"native\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"phone\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"continent\"\n            },\n            \"arguments\": [],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"code\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"name\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }]\n            }\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"currency\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"languages\"\n            },\n            \"arguments\": [],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"code\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }, {\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"name\"\n                },\n                \"arguments\": [],\n                \"directives\": []\n              }]\n            }\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"emoji\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"emojiU\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }]\n        }\n      }]\n    }\n  }],\n  \"loc\": {\n    \"start\": 0,\n    \"end\": 237,\n    \"source\": {\n      \"body\": \"query country($code:String!){\\r\\n  country(code:$code){\\r\\n    code\\r\\n    name\\r\\n    native\\r\\n    phone\\r\\n    continent{\\r\\n      code\\r\\n      name\\r\\n    }\\r\\n    currency\\r\\n    languages{\\r\\n      code\\r\\n      name\\r\\n    }  \\r\\n    emoji\\r\\n    emojiU\\r\\n  }\\r\\n}\",\n      \"name\": \"GraphQL request\",\n      \"locationOffset\": {\n        \"line\": 1,\n        \"column\": 1\n      }\n    }\n  }\n};\n\nclass ExpandableCountryInfo extends React.Component {\n  render() {\n    const code = this.props.countryCode;\n    return React.createElement(Query, {\n      query: FEED_QUERY_COUNTRY,\n      variables: {\n        code\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Loading...\");\n      if (error) return React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Error getting data! See logs for more info!\");\n      const countryData = data.country;\n      return React.createElement(CountryComponent, {\n        data: countryData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    });\n  }\n\n}\n\nclass BasicCountryInfo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expand: false\n    };\n  }\n\n  clickHandle() {\n    let showExpand = this.state.expand === false ? true : false;\n    this.setState({\n      expand: showExpand\n    });\n  }\n\n  renderExpandableCountryInfo(expand, code) {\n    if (expand === true) {\n      return React.createElement(ExpandableCountryInfo, {\n        countryCode: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"basicCountryInfo\",\n      onClick: () => this.clickHandle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.props.value, \" \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"(\", this.props.id, \")\")), this.renderExpandableCountryInfo(this.state.expand, this.props.id));\n  }\n\n}\n\nclass Country extends React.Component {\n  render() {\n    return React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(BasicCountryInfo, {\n      value: this.props.value,\n      id: this.props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass CountriesList extends React.Component {\n  render() {\n    return React.createElement(Query, {\n      query: FEED_QUERY_COUNTRIES,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Loading...\");\n      if (error) return React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Error getting data! See logs for more info!\");\n      const countriesArr = data.countries;\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, countriesArr.map(country => React.createElement(Country, {\n        key: country.code,\n        id: country.code,\n        value: country.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })));\n    });\n  }\n\n}\n\nclass AppLayout extends React.Component {\n  render() {\n    return React.createElement(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"countriesList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(CountriesList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })));\n  }\n\n}\n\nReactDOM.render(React.createElement(AppLayout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Lauris.Zaicevs/Downloads/repo/countries-app/src/index.js"],"names":["React","ReactDOM","ApolloProvider","ApolloClient","createHttpLink","InMemoryCache","Query","CountryComponent","httpLink","uri","client","link","cache","FEED_QUERY_COUNTRIES","FEED_QUERY_COUNTRY","ExpandableCountryInfo","Component","render","code","props","countryCode","loading","error","data","countryData","country","BasicCountryInfo","constructor","state","expand","clickHandle","showExpand","setState","renderExpandableCountryInfo","value","id","Country","CountriesList","countriesArr","countries","map","name","AppLayout","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { Query } from \"react-apollo\";\r\nimport { loader } from 'graphql.macro';\r\n\r\n\r\nimport CountryComponent from './country';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://countries.trevorblades.com/'\r\n})\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst FEED_QUERY_COUNTRIES = loader('./graphql/countries.graphql')\r\nconst FEED_QUERY_COUNTRY = loader('./graphql/country.graphql')\r\n\r\n\r\nclass ExpandableCountryInfo extends React.Component{\r\n\trender(){\r\n\t\tconst code = this.props.countryCode;\r\n\t\treturn(\r\n\t\t\t<Query query={FEED_QUERY_COUNTRY} variables={{code}}>\r\n\t\t    \t{\r\n\t\t    \t\t({ loading, error, data }) => {\r\n\t\t    \t\t\tif (loading) return <div className=\"loading\">Loading...</div>\r\n\t\t\t        \tif (error) return <div className=\"error\">Error getting data! See logs for more info!</div>\r\n\t\t\t        \tconst countryData = data.country;\r\n\t\t\t\t\t\treturn <CountryComponent data={countryData}/>\r\n\t\t\t\t\t}\r\n\t\t\t    }\r\n\t\t    </Query>\r\n\t    )\r\n\t}\r\n}\r\n\r\nclass BasicCountryInfo extends React.Component{\r\n  constructor() {\r\n  \tsuper();\r\n  \tthis.state = {\r\n  \t\texpand: false\r\n  \t};\r\n  }\r\n\r\n  clickHandle(){\r\n\t   let showExpand = this.state.expand === false ? true : false\r\n\t\t this.setState({expand: showExpand})\r\n\r\n\t}\r\n\r\n  renderExpandableCountryInfo(expand, code) {\r\n\t\tif(expand === true){\r\n\t\t\treturn <ExpandableCountryInfo countryCode={code} />\r\n\t\t} else {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t <div\r\n\t\t\t \tclassName=\"basicCountryInfo\"\r\n\t\t\t \tonClick={() => this.clickHandle()}\r\n\t\t\t >\r\n\t\t\t \t<h1>{this.props.value} <span>({this.props.id})</span></h1>\r\n\t\t\t \t{this.renderExpandableCountryInfo(this.state.expand, this.props.id)}\r\n\t\t\t</div>\r\n    );\r\n\t}\r\n}\r\n\r\nclass Country extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<li>\r\n\t\t\t\t<BasicCountryInfo\r\n\t\t\t\t\tvalue={this.props.value}\r\n\t\t\t\t\tid={this.props.id}\r\n\t\t\t\t/>\r\n\t\t\t</li>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass CountriesList extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t      <Query query={FEED_QUERY_COUNTRIES}>\r\n\t        {({ loading, error, data }) => {\r\n\t          if (loading) return <div className=\"loading\">Loading...</div>\r\n\t          if (error) return <div className=\"error\">Error getting data! See logs for more info!</div>\r\n\r\n\t          \tconst countriesArr = data.countries;\r\n\r\n\t\t    \treturn (\r\n\t\t\t\t\t<ul>\r\n\t\t            \t{countriesArr.map(country => <Country key={country.code} id={country.code} value={country.name}/> )}\r\n\t\t\t\t\t</ul>\r\n\t\t          )\r\n\t\t        }}\r\n\t      </Query>\r\n    \t);\r\n\t}\r\n}\r\n\r\nclass AppLayout extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<ApolloProvider client={client}>\r\n\t\t\t\t<div className=\"countriesList\">\r\n\t\t\t\t\t<CountriesList />\r\n\t\t\t\t</div>\r\n\t\t\t</ApolloProvider>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nReactDOM.render(<AppLayout />, document.getElementById('root'));\r\n"]},"metadata":{},"sourceType":"module"}